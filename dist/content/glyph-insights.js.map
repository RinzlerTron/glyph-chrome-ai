{"version":3,"file":"content/glyph-insights.js","mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://glyph/./src/content/glyph-insights.js"],"sourcesContent":["/**\n * Glyph Insights - Live Reading Assistant\n *\n * Proactively shows connections to previously captured articles\n * as the user browses ANY page (not just captured ones).\n *\n * This is the killer feature that makes Glyph \"ambient intelligence\".\n */\n\n// Configuration\nconst CONFIG = {\n  enabled: true,\n  minTextLength: 500,\n  extractLength: 1500,\n  minMatchingEntities: 2,\n  debounceMs: 2000,\n  excludedDomains: [\n    'chrome://',\n    'chrome-extension://',\n    'accounts.google.com',\n    'mail.google.com'\n  ]\n};\n\nlet insightsPanel = null;\nlet currentInsights = null;\nlet debounceTimer = null;\n\n// Initialize on page load\nif (shouldRunOnPage()) {\n  initialize();\n}\n\n/**\n * Check if insights should run on this page\n */\nfunction shouldRunOnPage() {\n  const url = window.location.href;\n\n  // Skip excluded domains\n  if (CONFIG.excludedDomains.some(domain => url.startsWith(domain))) {\n    return false;\n  }\n\n  // Skip if no text content\n  if (document.body.textContent.trim().length < CONFIG.minTextLength) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Initialize insights when page loads\n */\nfunction initialize() {\n  // Wait for page to be somewhat loaded\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      debounceAnalyzePage();\n    });\n  } else {\n    debounceAnalyzePage();\n  }\n\n  // Re-analyze if user scrolls (they might have reached the main content)\n  let scrolled = false;\n  window.addEventListener('scroll', () => {\n    if (!scrolled && window.scrollY > 100) {\n      scrolled = true;\n      debounceAnalyzePage();\n    }\n  }, { once: true });\n}\n\n/**\n * Debounce page analysis to avoid excessive API calls\n */\nfunction debounceAnalyzePage() {\n  if (debounceTimer) {\n    clearTimeout(debounceTimer);\n  }\n\n  debounceTimer = setTimeout(() => {\n    analyzePage();\n  }, CONFIG.debounceMs);\n}\n\n/**\n * Analyze current page and show insights if matches found\n */\nasync function analyzePage() {\n  try {\n    // Extract page content\n    const pageContent = extractPageContent();\n\n    if (!pageContent || pageContent.length < CONFIG.minTextLength) {\n      return;\n    }\n\n    // Send to service worker for entity extraction and matching\n    const response = await chrome.runtime.sendMessage({\n      type: 'ANALYZE_PAGE_FOR_INSIGHTS',\n      data: {\n        url: window.location.href,\n        title: document.title,\n        content: pageContent\n      }\n    });\n\n    if (response.success && response.matches && response.matches.length > 0) {\n      showInsights(response.matches, response.entities, response.duplicate);\n    } else if (response.success && response.duplicate) {\n      // Show duplicate warning even if no other matches\n      showInsights([], response.entities || [], response.duplicate);\n    }\n  } catch (error) {\n    console.error('[Glyph Insights] Analysis failed:', error);\n  }\n}\n\n/**\n * Extract meaningful content from page\n */\nfunction extractPageContent() {\n  // Try to find article content\n  const selectors = [\n    'article',\n    '[role=\"article\"]',\n    'main article',\n    '.article-content',\n    '.post-content',\n    '.entry-content',\n    'main',\n    '.content'\n  ];\n\n  let contentElement = null;\n  for (const selector of selectors) {\n    contentElement = document.querySelector(selector);\n    if (contentElement) break;\n  }\n\n  // Fallback to body if no article found\n  if (!contentElement) {\n    contentElement = document.body;\n  }\n\n  // Extract text, limiting to first N characters\n  const text = contentElement.textContent\n    .trim()\n    .replace(/\\s+/g, ' ')\n    .slice(0, CONFIG.extractLength);\n\n  return text;\n}\n\n/**\n * Show insights panel with matched articles and duplicate warning\n */\nfunction showInsights(matches, entities, duplicate) {\n  // Store current insights\n  currentInsights = { matches, entities, duplicate };\n\n  // Create panel if it doesn't exist\n  if (!insightsPanel) {\n    insightsPanel = createInsightsPanel();\n    document.body.appendChild(insightsPanel);\n  }\n\n  // Update panel content\n  updatePanelContent(matches, entities, duplicate);\n\n  // Fade in\n  setTimeout(() => {\n    insightsPanel.classList.add('glyph-panel-visible');\n  }, 100);\n}\n\n/**\n * Create the floating insights panel\n */\nfunction createInsightsPanel() {\n  const panel = document.createElement('div');\n  panel.className = 'glyph-insights-panel';\n  panel.innerHTML = `\n    <div class=\"glyph-panel-header\">\n      <div class=\"glyph-panel-title\">\n        <svg class=\"glyph-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n          <circle cx=\"12\" cy=\"12\" r=\"3\"/>\n          <circle cx=\"12\" cy=\"5\" r=\"1\"/>\n          <circle cx=\"12\" cy=\"19\" r=\"1\"/>\n          <circle cx=\"5\" cy=\"12\" r=\"1\"/>\n          <circle cx=\"19\" cy=\"12\" r=\"1\"/>\n          <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"8\"/>\n          <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"15\"/>\n          <line x1=\"15\" y1=\"12\" x2=\"16\" y2=\"12\"/>\n          <line x1=\"8\" y1=\"12\" x2=\"9\" y2=\"12\"/>\n        </svg>\n        <span>Glyph Insights</span>\n      </div>\n      <button class=\"glyph-panel-close\" title=\"Close\">×</button>\n    </div>\n    <div class=\"glyph-panel-content\">\n      <!-- Content dynamically inserted -->\n    </div>\n    <div class=\"glyph-panel-footer\">\n      <button class=\"glyph-capture-btn\">Capture This Article</button>\n    </div>\n  `;\n\n  // Add event listeners\n  panel.querySelector('.glyph-panel-close').addEventListener('click', () => {\n    hidePanel();\n  });\n\n  panel.querySelector('.glyph-capture-btn').addEventListener('click', () => {\n    captureCurrentPage();\n  });\n\n  // Inject styles\n  injectStyles();\n\n  return panel;\n}\n\n/**\n * Update panel with matches and duplicate warning\n */\nfunction updatePanelContent(matches, entities, duplicate) {\n  const contentEl = insightsPanel.querySelector('.glyph-panel-content');\n\n  let html = '';\n\n  // Show duplicate warning first if present\n  if (duplicate) {\n    const daysAgo = Math.floor((Date.now() - duplicate.capturedAt) / (1000 * 60 * 60 * 24));\n    const timeAgo = daysAgo === 0 ? 'today' : daysAgo === 1 ? 'yesterday' : `${daysAgo} days ago`;\n\n    html += `\n      <div class=\"glyph-duplicate-warning\">\n        <div class=\"glyph-duplicate-icon\">⚠️</div>\n        <div class=\"glyph-duplicate-content\">\n          <strong>You may have already captured this</strong>\n          <div class=\"glyph-duplicate-title\">\"${escapeHtml(duplicate.title)}\"</div>\n          <div class=\"glyph-duplicate-meta\">\n            ${duplicate.overlap}% similar • Captured ${timeAgo}\n          </div>\n          <button class=\"glyph-view-original-btn\" data-article-id=\"${duplicate.id}\">View Original</button>\n        </div>\n      </div>\n    `;\n  }\n\n  // Show related articles if any\n  if (matches && matches.length > 0) {\n    const entitiesText = entities.slice(0, 3).map(e => `\"${e}\"`).join(', ');\n    const moreEntities = entities.length > 3 ? ` +${entities.length - 3} more` : '';\n\n    html += `\n      <p class=\"glyph-insight-text\">\n        ${duplicate ? 'Also related:' : `You've read about <strong>${entitiesText}${moreEntities}</strong> in ${matches.length} ${matches.length === 1 ? 'article' : 'articles'}:`}\n      </p>\n      <div class=\"glyph-matches-list\">\n        ${matches.map(match => `\n          <div class=\"glyph-match-item\" data-article-id=\"${match.id}\">\n            <div class=\"glyph-match-title\">${escapeHtml(match.title)}</div>\n            <div class=\"glyph-match-meta\">\n              <span class=\"glyph-match-entities\">${match.sharedEntities} ${match.sharedEntities === 1 ? 'entity' : 'entities'} in common</span>\n              <span class=\"glyph-match-time\">${formatTimeAgo(match.capturedAt)}</span>\n            </div>\n          </div>\n        `).join('')}\n      </div>\n    `;\n  }\n\n  contentEl.innerHTML = html;\n\n  // Add click handlers\n  contentEl.querySelectorAll('.glyph-match-item').forEach(item => {\n    item.addEventListener('click', () => {\n      openGraphPage(item.dataset.articleId);\n    });\n  });\n\n  // Add click handler for \"View Original\" button\n  const viewOriginalBtn = contentEl.querySelector('.glyph-view-original-btn');\n  if (viewOriginalBtn) {\n    viewOriginalBtn.addEventListener('click', (e) => {\n      e.stopPropagation();\n      openGraphPage(viewOriginalBtn.dataset.articleId);\n    });\n  }\n}\n\n/**\n * Hide the panel\n */\nfunction hidePanel() {\n  if (insightsPanel) {\n    insightsPanel.classList.remove('glyph-panel-visible');\n  }\n}\n\n/**\n * Capture current page\n */\nasync function captureCurrentPage() {\n  try {\n    // Send message to background script\n    await chrome.runtime.sendMessage({\n      type: 'CAPTURE_CURRENT_TAB'\n    });\n\n    // Show success feedback\n    const btn = insightsPanel.querySelector('.glyph-capture-btn');\n    const originalText = btn.textContent;\n    btn.textContent = '✓ Captured!';\n    btn.disabled = true;\n\n    setTimeout(() => {\n      btn.textContent = originalText;\n      btn.disabled = false;\n      hidePanel();\n    }, 2000);\n  } catch (error) {\n    console.error('[Glyph Insights] Capture failed:', error);\n  }\n}\n\n/**\n * Open graph page with article selected\n */\nfunction openGraphPage(articleId) {\n  chrome.runtime.sendMessage({\n    type: 'OPEN_GRAPH_PAGE',\n    articleId: articleId\n  });\n}\n\n/**\n * Inject styles for the panel\n */\nfunction injectStyles() {\n  if (document.getElementById('glyph-insights-styles')) {\n    return; // Already injected\n  }\n\n  const style = document.createElement('style');\n  style.id = 'glyph-insights-styles';\n  style.textContent = `\n    .glyph-insights-panel {\n      position: fixed;\n      bottom: 24px;\n      right: 24px;\n      width: 360px;\n      max-height: 480px;\n      background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);\n      border: 1px solid rgba(102, 126, 234, 0.3);\n      border-radius: 12px;\n      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);\n      z-index: 2147483647;\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n      opacity: 0;\n      transform: translateY(20px);\n      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n      pointer-events: none;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .glyph-insights-panel.glyph-panel-visible {\n      opacity: 1;\n      transform: translateY(0);\n      pointer-events: all;\n    }\n\n    .glyph-panel-header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 16px;\n      border-bottom: 1px solid rgba(102, 126, 234, 0.2);\n    }\n\n    .glyph-panel-title {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      color: #e0e0e0;\n      font-weight: 600;\n      font-size: 15px;\n    }\n\n    .glyph-icon {\n      color: #667eea;\n      animation: glyph-pulse 2s ease-in-out infinite;\n    }\n\n    @keyframes glyph-pulse {\n      0%, 100% { opacity: 1; }\n      50% { opacity: 0.6; }\n    }\n\n    .glyph-panel-close {\n      background: none;\n      border: none;\n      color: #888;\n      font-size: 28px;\n      line-height: 1;\n      cursor: pointer;\n      padding: 0;\n      width: 24px;\n      height: 24px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      transition: color 0.2s;\n    }\n\n    .glyph-panel-close:hover {\n      color: #e0e0e0;\n    }\n\n    .glyph-panel-content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 16px;\n    }\n\n    .glyph-insight-text {\n      margin: 0 0 16px 0;\n      color: #b0b0b0;\n      font-size: 14px;\n      line-height: 1.6;\n    }\n\n    .glyph-insight-text strong {\n      color: #e0e0e0;\n    }\n\n    .glyph-matches-list {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n    }\n\n    .glyph-match-item {\n      padding: 12px;\n      background: rgba(255, 255, 255, 0.05);\n      border-radius: 8px;\n      cursor: pointer;\n      transition: all 0.2s;\n      border: 1px solid transparent;\n    }\n\n    .glyph-match-item:hover {\n      background: rgba(102, 126, 234, 0.1);\n      border-color: rgba(102, 126, 234, 0.3);\n    }\n\n    .glyph-match-title {\n      color: #e0e0e0;\n      font-size: 14px;\n      font-weight: 500;\n      margin-bottom: 6px;\n      line-height: 1.4;\n    }\n\n    .glyph-match-meta {\n      display: flex;\n      gap: 12px;\n      font-size: 12px;\n      color: #888;\n    }\n\n    .glyph-duplicate-warning {\n      background: rgba(251, 146, 60, 0.1);\n      border: 1px solid rgba(251, 146, 60, 0.3);\n      border-radius: 8px;\n      padding: 12px;\n      margin-bottom: 16px;\n      display: flex;\n      gap: 12px;\n      align-items: flex-start;\n    }\n\n    .glyph-duplicate-icon {\n      font-size: 20px;\n      flex-shrink: 0;\n    }\n\n    .glyph-duplicate-content {\n      flex: 1;\n    }\n\n    .glyph-duplicate-content strong {\n      color: #fb923c;\n      font-size: 13px;\n      display: block;\n      margin-bottom: 6px;\n    }\n\n    .glyph-duplicate-title {\n      color: #e0e0e0;\n      font-size: 13px;\n      margin-bottom: 4px;\n      font-weight: 500;\n    }\n\n    .glyph-duplicate-meta {\n      color: #999;\n      font-size: 12px;\n      margin-bottom: 8px;\n    }\n\n    .glyph-view-original-btn {\n      background: rgba(251, 146, 60, 0.2);\n      border: 1px solid rgba(251, 146, 60, 0.4);\n      color: #fb923c;\n      padding: 6px 12px;\n      border-radius: 6px;\n      font-size: 12px;\n      cursor: pointer;\n      transition: all 0.2s;\n    }\n\n    .glyph-view-original-btn:hover {\n      background: rgba(251, 146, 60, 0.3);\n      border-color: rgba(251, 146, 60, 0.6);\n    }\n\n    .glyph-panel-footer {\n      padding: 12px 16px;\n      border-top: 1px solid rgba(102, 126, 234, 0.2);\n    }\n\n    .glyph-capture-btn {\n      width: 100%;\n      padding: 10px 16px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      border: none;\n      border-radius: 8px;\n      color: white;\n      font-size: 14px;\n      font-weight: 600;\n      cursor: pointer;\n      transition: transform 0.2s, box-shadow 0.2s;\n    }\n\n    .glyph-capture-btn:hover:not(:disabled) {\n      transform: translateY(-1px);\n      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);\n    }\n\n    .glyph-capture-btn:disabled {\n      opacity: 0.7;\n      cursor: not-allowed;\n    }\n\n    /* Scrollbar styling */\n    .glyph-panel-content::-webkit-scrollbar {\n      width: 6px;\n    }\n\n    .glyph-panel-content::-webkit-scrollbar-track {\n      background: rgba(255, 255, 255, 0.05);\n      border-radius: 3px;\n    }\n\n    .glyph-panel-content::-webkit-scrollbar-thumb {\n      background: rgba(102, 126, 234, 0.5);\n      border-radius: 3px;\n    }\n\n    .glyph-panel-content::-webkit-scrollbar-thumb:hover {\n      background: rgba(102, 126, 234, 0.7);\n    }\n  `;\n\n  document.head.appendChild(style);\n}\n\n/**\n * Format time ago (e.g., \"2 days ago\")\n */\nfunction formatTimeAgo(timestamp) {\n  const seconds = Math.floor((Date.now() - timestamp) / 1000);\n\n  if (seconds < 60) return 'just now';\n  if (seconds < 3600) return `${Math.floor(seconds / 60)} min ago`;\n  if (seconds < 86400) return `${Math.floor(seconds / 3600)} hours ago`;\n  if (seconds < 604800) return `${Math.floor(seconds / 86400)} days ago`;\n  if (seconds < 2592000) return `${Math.floor(seconds / 604800)} weeks ago`;\n  return `${Math.floor(seconds / 2592000)} months ago`;\n}\n\n/**\n * Escape HTML to prevent XSS\n */\nfunction escapeHtml(text) {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\n// Listen for settings changes (user can disable insights)\nchrome.runtime.onMessage.addListener((message) => {\n  if (message.type === 'INSIGHTS_SETTINGS_CHANGED') {\n    CONFIG.enabled = message.enabled;\n    if (!CONFIG.enabled && insightsPanel) {\n      hidePanel();\n    }\n  }\n});\n"],"names":[],"sourceRoot":""}