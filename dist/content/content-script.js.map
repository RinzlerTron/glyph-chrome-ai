{"version":3,"file":"content/content-script.js","mappings":";AAAA;;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","sources":["webpack://glyph/./src/content/content-script.js"],"sourcesContent":["// Content script for extracting article content from web pages\n\n// Listen for capture requests from popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.type === 'CAPTURE_ARTICLE') {\n    handleCapture()\n      .then(result => sendResponse(result))\n      .catch(error => sendResponse({ success: false, error: error.message }));\n    return true; // Keep channel open for async\n  }\n});\n\nasync function handleCapture() {\n  try {\n    const articleText = extractArticleText();\n    const title = extractTitle();\n    const language = detectLanguage();\n\n    if (!articleText || articleText.length < 100) {\n      throw new Error('Could not extract meaningful content from this page');\n    }\n\n    // Send to background for processing\n    const response = await chrome.runtime.sendMessage({\n      type: 'CAPTURE_ARTICLE',\n      data: {\n        text: articleText,\n        title: title,\n        url: window.location.href,\n        language: language\n      }\n    });\n\n    if (response.success) {\n      showNotification('Article captured successfully!', 'success');\n    } else {\n      showNotification(`Failed to capture: ${response.error}`, 'error');\n    }\n\n    return response;\n  } catch (error) {\n    console.error('Capture failed:', error);\n    showNotification(`Error: ${error.message}`, 'error');\n    return { success: false, error: error.message };\n  }\n}\n\nfunction extractArticleText() {\n  // Try to find article content using common selectors\n  const selectors = [\n    'article',\n    '[role=\"main\"]',\n    '.article-content',\n    '.post-content',\n    '.entry-content',\n    '.content',\n    'main'\n  ];\n\n  for (const selector of selectors) {\n    const element = document.querySelector(selector);\n    if (element && element.textContent.length > 500) {\n      return cleanText(element.textContent);\n    }\n  }\n\n  // Fallback to body text\n  return cleanText(document.body.textContent);\n}\n\nfunction extractTitle() {\n  // Try multiple methods to get the best title\n  const ogTitle = document.querySelector('meta[property=\"og:title\"]');\n  if (ogTitle) return ogTitle.content;\n\n  const h1 = document.querySelector('h1');\n  if (h1) return h1.textContent.trim();\n\n  return document.title;\n}\n\nfunction detectLanguage() {\n  // Try to detect language from HTML attributes\n  const htmlLang = document.documentElement.lang;\n  if (htmlLang) return htmlLang.split('-')[0];\n\n  const metaLang = document.querySelector('meta[http-equiv=\"content-language\"]');\n  if (metaLang) return metaLang.content.split('-')[0];\n\n  return 'en'; // Default to English\n}\n\nfunction cleanText(text) {\n  if (!text) return '';\n\n  return text\n    .replace(/\\s+/g, ' ')\n    .replace(/\\n{3,}/g, '\\n\\n')\n    .trim();\n}\n\nfunction showNotification(message, type) {\n  // Create a simple toast notification\n  const notification = document.createElement('div');\n  notification.textContent = message;\n  notification.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    padding: 16px 24px;\n    background: ${type === 'success' ? '#10b981' : '#ef4444'};\n    color: white;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    z-index: 10000;\n    font-family: system-ui, -apple-system, sans-serif;\n    font-size: 14px;\n    font-weight: 500;\n    animation: slideIn 0.3s ease-out;\n  `;\n\n  // Add animation\n  const style = document.createElement('style');\n  style.textContent = `\n    @keyframes slideIn {\n      from {\n        transform: translateX(100%);\n        opacity: 0;\n      }\n      to {\n        transform: translateX(0);\n        opacity: 1;\n      }\n    }\n  `;\n  document.head.appendChild(style);\n\n  document.body.appendChild(notification);\n\n  // Remove after 3 seconds\n  setTimeout(() => {\n    notification.style.animation = 'slideIn 0.3s ease-out reverse';\n    setTimeout(() => {\n      notification.remove();\n      style.remove();\n    }, 300);\n  }, 3000);\n}\n\n// Log when content script is loaded\n// console.log('Glyph content script loaded');\n"],"names":[],"sourceRoot":""}