{"version":3,"file":"popup-mini/popup.js","mappings":";AAAA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://glyph/./src/popup-mini/popup.js"],"sourcesContent":["// Popup-mini: Quick stats + navigation\n\nlet isCapturing = false;\n\nasync function loadStats() {\n  try {\n    // Get stats from background script\n    const statsResponse = await chrome.runtime.sendMessage({ type: 'GET_STATISTICS' });\n    const captureStatus = await chrome.storage.local.get(['capturingStatus']);\n\n    const stats = statsResponse.statistics || { totalEntities: 0, totalRelationships: 0, totalArticles: 0 };\n    const capturing = captureStatus.capturingStatus || { active: false, progress: '' };\n\n    // Update display\n    document.getElementById('entityCount').textContent = stats.totalEntities || 0;\n    document.getElementById('connectionCount').textContent = stats.totalRelationships || 0;\n    document.getElementById('articleCount').textContent = stats.totalArticles || 0;\n\n    // Show capture status\n    const statusEl = document.getElementById('status');\n    if (capturing.active) {\n      isCapturing = true;\n      statusEl.textContent = capturing.progress || 'Extracting insights...';\n      statusEl.className = 'status capturing';\n\n      document.getElementById('tip').textContent = 'You can close this popup. Processing continues in background.';\n    } else if (stats.totalArticles === 0) {\n      statusEl.textContent = 'Click the icon to capture your first article';\n      statusEl.className = 'status';\n\n      document.getElementById('tip').textContent = '💡 Tip: Browse any article and click the Glyph icon to start building your knowledge graph';\n    } else {\n      statusEl.textContent = `✓ ${stats.totalArticles} ${stats.totalArticles === 1 ? 'article' : 'articles'} in your knowledge graph`;\n      statusEl.className = 'status';\n\n      document.getElementById('tip').textContent = '💡 Tip: Enable auto-save in settings for seamless learning';\n    }\n\n  } catch (error) {\n    console.error('Error loading stats:', error);\n  }\n}\n\n// Listen for capture completion\nchrome.runtime.onMessage.addListener((message) => {\n  if (message.type === 'CAPTURE_PROGRESS') {\n    document.getElementById('status').textContent = message.progress;\n  } else if (message.type === 'CAPTURE_COMPLETE') {\n    isCapturing = false;\n\n    // Show success feedback\n    const statusEl = document.getElementById('status');\n    const tipEl = document.getElementById('tip');\n\n    statusEl.textContent = '✓ Article captured!';\n    statusEl.className = 'status';\n    tipEl.innerHTML = `🎉 <strong style=\"color: #4ade80;\">Success!</strong><br>Article added to your knowledge graph<br><span style=\"color: rgba(255,255,255,0.7); font-size: 11px;\">${message.entities || 0} entities extracted</span>`;\n\n    // Reset to normal state after a moment\n    setTimeout(() => {\n      loadStats();\n    }, 2500);\n  } else if (message.type === 'STATS_UPDATED') {\n    loadStats();\n  }\n});\n\n// Capture current page\ndocument.getElementById('captureBtn').addEventListener('click', async () => {\n  try {\n    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    if (!tab) return;\n\n    // Extract page content first for duplicate check\n    const result = await chrome.scripting.executeScript({\n      target: { tabId: tab.id },\n      function: extractPageForDuplicateCheck\n    });\n\n    if (!result || !result[0] || !result[0].result) {\n      // Fallback: capture without duplicate check\n      await captureWithoutCheck(tab);\n      return;\n    }\n\n    const pageData = result[0].result;\n\n    // Check for duplicates\n    const duplicateCheck = await chrome.runtime.sendMessage({\n      type: 'CHECK_DUPLICATE',\n      data: pageData\n    });\n\n    if (duplicateCheck.isDuplicate && duplicateCheck.duplicates.length > 0) {\n      // Show duplicate warning\n      const duplicate = duplicateCheck.duplicates[0];\n      const daysAgo = Math.floor((Date.now() - duplicate.capturedAt) / (1000 * 60 * 60 * 24));\n      const timeAgo = daysAgo === 0 ? 'today' : daysAgo === 1 ? 'yesterday' : `${daysAgo} days ago`;\n\n      const confirmed = confirm(\n        `⚠️ Similar Article Found\\n\\n` +\n        `You captured \"${duplicate.title}\" ${timeAgo}\\n\\n` +\n        `${duplicate.overlap}% content overlap\\n\\n` +\n        `Capture anyway?`\n      );\n\n      if (!confirmed) {\n        return;\n      }\n    }\n\n    // Proceed with capture\n    await captureWithoutCheck(tab);\n\n  } catch (error) {\n    console.error('Capture failed:', error);\n  }\n});\n\n// Helper function to capture without duplicate check\nasync function captureWithoutCheck(tab) {\n  // Show immediate feedback with article info\n  const statusEl = document.getElementById('status');\n  const tipEl = document.getElementById('tip');\n\n  const title = tab.title.length > 40 ? tab.title.substring(0, 40) + '...' : tab.title;\n  const hostname = new URL(tab.url).hostname;\n\n  statusEl.textContent = 'Starting capture...';\n  statusEl.className = 'status capturing';\n  tipEl.innerHTML = `📄 <strong>Capturing:</strong><br>\"${title}\"<br><span style=\"color: rgba(255,255,255,0.7); font-size: 11px;\">${hostname}</span>`;\n\n  await chrome.runtime.sendMessage({\n    type: 'CAPTURE_CURRENT_TAB',\n    tab: tab\n  });\n\n  // Refresh stats immediately to show capturing status\n  loadStats();\n}\n\n// Injected function to extract page data for duplicate check\nfunction extractPageForDuplicateCheck() {\n  const selectors = [\n    'article',\n    '[role=\"article\"]',\n    'main article',\n    '.article-content',\n    '.post-content',\n    '.entry-content',\n    'main',\n    '.content'\n  ];\n\n  let contentElement = null;\n  for (const selector of selectors) {\n    contentElement = document.querySelector(selector);\n    if (contentElement) break;\n  }\n\n  if (!contentElement) {\n    contentElement = document.body;\n  }\n\n  const text = contentElement.textContent\n    .trim()\n    .replace(/\\s+/g, ' ')\n    .slice(0, 2000);\n\n  return {\n    title: document.title,\n    url: window.location.href,\n    text: text\n  };\n}\n\n// Prevent multiple script executions\nif (!window.glyphPopupInitialized) {\n  window.glyphPopupInitialized = true;\n  console.log('[POPUP DEBUG] Initializing popup script');\n\n// Debounce mechanism to prevent double clicks\nlet isCreatingTab = false;\n\n// Remove any existing event listeners first\nconst viewGraphBtn = document.getElementById('viewGraphBtn');\nconst settingsBtn = document.getElementById('settingsBtn');\n\nif (viewGraphBtn) {\n  // Clone node to remove all event listeners\n  const newViewGraphBtn = viewGraphBtn.cloneNode(true);\n  viewGraphBtn.parentNode.replaceChild(newViewGraphBtn, viewGraphBtn);\n}\n\nif (settingsBtn) {\n  // Clone node to remove all event listeners\n  const newSettingsBtn = settingsBtn.cloneNode(true);\n  settingsBtn.parentNode.replaceChild(newSettingsBtn, settingsBtn);\n}\n\n// View full graph - robust duplicate prevention\ndocument.getElementById('viewGraphBtn').addEventListener('click', async (e) => {\n  console.log('[POPUP DEBUG] View Graph clicked, isCreatingTab:', isCreatingTab);\n\n  e.preventDefault();\n  e.stopPropagation();\n\n  if (isCreatingTab) {\n    console.log('[POPUP DEBUG] Already creating tab, ignoring click');\n    return;\n  }\n\n  isCreatingTab = true;\n\n  try {\n    await chrome.tabs.create({\n      url: chrome.runtime.getURL('graph-page/index.html')\n    });\n    console.log('[POPUP DEBUG] Tab created successfully');\n  } catch (error) {\n    console.error('[POPUP DEBUG] Failed to create tab:', error);\n  }\n\n  // Reset flag after a short delay\n  setTimeout(() => {\n    isCreatingTab = false;\n    console.log('[POPUP DEBUG] Reset isCreatingTab flag');\n  }, 1000);\n});\n\n// Open settings - robust duplicate prevention\ndocument.getElementById('settingsBtn').addEventListener('click', async (e) => {\n  console.log('[POPUP DEBUG] Settings clicked, isCreatingTab:', isCreatingTab);\n\n  e.preventDefault();\n  e.stopPropagation();\n\n  if (isCreatingTab) {\n    console.log('[POPUP DEBUG] Already creating tab, ignoring click');\n    return;\n  }\n\n  isCreatingTab = true;\n\n  try {\n    await chrome.tabs.create({\n      url: chrome.runtime.getURL('graph-page/index.html') + '?tab=settings'\n    });\n    console.log('[POPUP DEBUG] Settings tab created successfully');\n  } catch (error) {\n    console.error('[POPUP DEBUG] Failed to create settings tab:', error);\n  }\n\n  // Reset flag after a short delay\n  setTimeout(() => {\n    isCreatingTab = false;\n    console.log('[POPUP DEBUG] Reset isCreatingTab flag');\n  }, 1000);\n});\n\n// Load stats on open\nloadStats();\n\n// Refresh every 2 seconds if capturing\nsetInterval(() => {\n  if (isCapturing) {\n    loadStats();\n  }\n}, 2000);\n\n} else {\n  console.log('[POPUP DEBUG] Script already initialized, skipping');\n}\n"],"names":[],"sourceRoot":""}